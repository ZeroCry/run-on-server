// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`run-on-server id mappings macro error cases when passing a template literal with expressions in it to runOnServer 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
runOnServer(\`foo = \${process.env.NODE_ENV}\`);

#ERROR
MacroError: unknown: Found a template literal with embedded expressions being passed to runOnServer. This is not supported. Instead of doing this, use the \`args\` argument within the template literal string to reference the optional array that can be passed as the second argument to runOnServer.
"
`;

exports[`run-on-server id mappings macro error cases when passing an unsupported expression to runOnServer 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
runOnServer(2 + 2);

#ERROR
MacroError: unknown: Found a situation where runOnServer was called and the first argument was not a template literal, string literal, arrow function expression, function expression, or identifier referring to a function. These are the only forms supported by the run-on-server macro.
"
`;

exports[`run-on-server id mappings macro error cases when runOnServer is called with no arguments 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
runOnServer();

#ERROR
MacroError: unknown: The runOnServer function returned by createClient was called without any arguments. This is not a valid use of the library.
"
`;

exports[`run-on-server id mappings macro error cases when runOnServer is not saved to a variable 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
createClient(\\"http://localhost:3000\\")(\\"args\\", [1, 2, 3]);

#ERROR
MacroError: unknown: Found a situation where the result of calling createClient was not saved to a variable. Saving the result of createClient to a variable is the only suported way to use the run-on-server macro. For example:
  const runOnServer = createClient(\\"http://somewhere:3000\\")

"
`;

exports[`run-on-server id mappings macro error cases when runOnServer is references as a value instead of called directly 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
module.exports = runOnServer;

#ERROR
MacroError: unknown: The runOnServer function returned by createClient was referenced in a way where it wasn't a direct variable call. For instance, you might be putting runOnServer in an object literal, or trying to use runOnServer.call or runOnServer.apply. This is not supported- the only form of referencing runOnServer supported by the run-on-server macro is calling it directly, eg runOnServer(...).
"
`;

exports[`run-on-server id mappings macro error cases when runOnServer is saved to a variable but the id of the declarator is not an identifier 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const { call, apply } = createClient(\\"http://localhost:3000\\");
call(null, \\"args\\", [1, 2, 3]);

#ERROR
MacroError: unknown: Found a situation where the result of calling createClient was saved to a variable, but that variable was created in an unexpected way. The only variable declaration forms supported by the run-on-server macro are:
  const runOnServer = createClient(\\"http://somewhere:3000\\");
OR
  var runOnServer = createClient(\\"http://somewhere:3000\\");
OR
  let runOnServer = createClient(\\"http://somewhere:3000\\");

"
`;

exports[`run-on-server id mappings macro error cases when trying to use runOnServer.apply 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
runOnServer.apply(null, [\\"foo\\", [1, 2, 3]]);

#ERROR
MacroError: unknown: The runOnServer function returned by createClient was referenced in a way where it wasn't a direct variable call. For instance, you might be putting runOnServer in an object literal, or trying to use runOnServer.call or runOnServer.apply. This is not supported- the only form of referencing runOnServer supported by the run-on-server macro is calling it directly, eg runOnServer(...).
"
`;

exports[`run-on-server id mappings macro error cases when trying to use runOnServer.call 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
runOnServer.call(null, \\"foo\\", [1, 2, 3]);

#ERROR
MacroError: unknown: The runOnServer function returned by createClient was referenced in a way where it wasn't a direct variable call. For instance, you might be putting runOnServer in an object literal, or trying to use runOnServer.call or runOnServer.apply. This is not supported- the only form of referencing runOnServer supported by the run-on-server macro is calling it directly, eg runOnServer(...).
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file arrow function expression (with body) 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
const result = runOnServer(() => { return 5 });

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
const result = runOnServer({
id: \\"2a32f58ab745fa4d5ac3f468a278bf33\\"
});

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"2a32f58ab745fa4d5ac3f468a278bf33\\": () => {
  return 5;
}
};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file arrow function expression 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
const result = runOnServer(() => 5);

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
const result = runOnServer({
id: \\"20dd5f36e5e9c15bd0dbd1f47b9ce147\\"
});

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"20dd5f36e5e9c15bd0dbd1f47b9ce147\\": () => 5
};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file arrow function expression as identifier from variable declaration (const) 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
const foo = () => { return 5; };

const result = runOnServer(foo);

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
const foo = () => {
return 5;
};

const result = runOnServer({
id: \\"acbd18db4cc2f85cedef654fccc4a4d8\\"
});

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"acbd18db4cc2f85cedef654fccc4a4d8\\": foo
};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file arrow function expression as identifier from variable declaration (let) 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
let foo = () => { return 5; };

const result = runOnServer(foo);

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
let foo = () => {
return 5;
};

const result = runOnServer({
id: \\"acbd18db4cc2f85cedef654fccc4a4d8\\"
});

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"acbd18db4cc2f85cedef654fccc4a4d8\\": foo
};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file arrow function expression as identifier from variable declaration (var) 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
var foo = () => { return 5; };

const result = runOnServer(foo);

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
var foo = () => {
return 5;
};

const result = runOnServer({
id: \\"acbd18db4cc2f85cedef654fccc4a4d8\\"
});

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"acbd18db4cc2f85cedef654fccc4a4d8\\": foo
};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file function as identifier from function declaration 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
function foo() { return 5; }

const result = runOnServer(foo);

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
function foo() {
return 5;
}

const result = runOnServer({
id: \\"a0cf54e0f028a1da7c724e67984d2503\\"
});

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"a0cf54e0f028a1da7c724e67984d2503\\": function foo() {
  return 5;
}
};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file function expression 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
const result = runOnServer(function() { return 5; });

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
const result = runOnServer({
id: \\"dd0ace1b29ea37669faa77fe0757d64b\\"
});

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"dd0ace1b29ea37669faa77fe0757d64b\\": function () {
  return 5;
}
};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file function expression as identifier from variable declaration (const) 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
const foo = function foo() { return 5; };

const result = runOnServer(foo);

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
const foo = function foo() {
return 5;
};

const result = runOnServer({
id: \\"acbd18db4cc2f85cedef654fccc4a4d8\\"
});

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"acbd18db4cc2f85cedef654fccc4a4d8\\": foo
};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file function expression as identifier from variable declaration (let) 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
let foo = function foo() { return 5; };

const result = runOnServer(foo);

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
let foo = function foo() {
return 5;
};

const result = runOnServer({
id: \\"acbd18db4cc2f85cedef654fccc4a4d8\\"
});

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"acbd18db4cc2f85cedef654fccc4a4d8\\": foo
};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file function expression as identifier from variable declaration (var) 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
var foo = function foo() { return 5; };

const result = runOnServer(foo);

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
var foo = function foo() {
return 5;
};

const result = runOnServer({
id: \\"acbd18db4cc2f85cedef654fccc4a4d8\\"
});

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"acbd18db4cc2f85cedef654fccc4a4d8\\": foo
};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file if you import createClient but don't use it 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");

#OUTPUT - CODE


#OUTPUT - ID MAPPINGS
(File does not exist)
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file if you make a runOnServer function but don't use it 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file simple template literal 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
const result = runOnServer(\`args\`, [1, 2, 3]);

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
const result = runOnServer({
id: \\"99beebb8fcb2435a7bcef2ce7c0d946e\\"
}, [1, 2, 3]);

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"99beebb8fcb2435a7bcef2ce7c0d946e\\": \`args\`
};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file string literal 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
const result = runOnServer(\\"args\\", [1, 2, 3]);

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
const result = runOnServer({
id: \\"c63afd45dad73502a085847e3c5ed5c2\\"
}, [1, 2, 3]);

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"c63afd45dad73502a085847e3c5ed5c2\\": \\"args\\"
};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file string literal as identifier from variable declaration (const) 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
const foo = \\"args\\";

const result = runOnServer(foo, [1, 2, 3]);

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
const foo = \\"args\\";

const result = runOnServer({
id: \\"acbd18db4cc2f85cedef654fccc4a4d8\\"
}, [1, 2, 3]);

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"acbd18db4cc2f85cedef654fccc4a4d8\\": foo
};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file string literal as identifier from variable declaration (let) 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
let foo = \\"args\\";

const result = runOnServer(foo, [1, 2, 3]);

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
let foo = \\"args\\";

const result = runOnServer({
id: \\"acbd18db4cc2f85cedef654fccc4a4d8\\"
}, [1, 2, 3]);

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"acbd18db4cc2f85cedef654fccc4a4d8\\": foo
};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file string literal as identifier from variable declaration (var) 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
var foo = \\"args\\";

const result = runOnServer(foo, [1, 2, 3]);

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
var foo = \\"args\\";

const result = runOnServer({
id: \\"acbd18db4cc2f85cedef654fccc4a4d8\\"
}, [1, 2, 3]);

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"acbd18db4cc2f85cedef654fccc4a4d8\\": foo
};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file template literal as identifier from variable declaration (const) 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
const foo = \`args\`;

const result = runOnServer(foo, [1, 2, 3]);

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
const foo = \`args\`;

const result = runOnServer({
id: \\"acbd18db4cc2f85cedef654fccc4a4d8\\"
}, [1, 2, 3]);

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"acbd18db4cc2f85cedef654fccc4a4d8\\": foo
};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file template literal as identifier from variable declaration (let) 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
let foo = \`args\`;

const result = runOnServer(foo, [1, 2, 3]);

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
let foo = \`args\`;

const result = runOnServer({
id: \\"acbd18db4cc2f85cedef654fccc4a4d8\\"
}, [1, 2, 3]);

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"acbd18db4cc2f85cedef654fccc4a4d8\\": foo
};
"
`;

exports[`run-on-server id mappings macro replaces the functions and strings in the client code with ids and outputs those functions and strings to the configured output file template literal as identifier from variable declaration (var) 1`] = `
"
#INPUT
const createClient = require(\\"/Users/suchipi/Code/run-on-server/client.macro\\");
const runOnServer = createClient(\\"http://localhost:3000\\");
var foo = \`args\`;

const result = runOnServer(foo, [1, 2, 3]);

#OUTPUT - CODE
var createClient = require(\\"run-on-server/client\\");

const runOnServer = createClient(\\"http://localhost:3000\\");
var foo = \`args\`;

const result = runOnServer({
id: \\"acbd18db4cc2f85cedef654fccc4a4d8\\"
}, [1, 2, 3]);

#OUTPUT - ID MAPPINGS
/*
This file was generated by the run-on-server babel macro. It should not
be edited by hand.

If you want to output this file to a different location, you can
configure the macro by creating a file named \`babel-plugin-macros.config.js\`
in the root of your project with the following content:

const path = require(\\"path\\");
module.exports = {
runOnServer: {
  outputPath: path.resolve(__dirname, \\"somewhere\\", \\"else.js\\")
}
};
*/module.exports = {
\\"acbd18db4cc2f85cedef654fccc4a4d8\\": foo
};
"
`;
